// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using StudioManager.Model;

#nullable disable

namespace StudioManager.Migrations
{
    [DbContext(typeof(PostgresContext))]
    [Migration("20240423135631_Games1")]
    partial class Games1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "sex", new[] { "М", "Ж" });
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "pg_catalog", "adminpack");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("StudioManager.Model.Department", b =>
                {
                    b.Property<int>("IdDepartment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_department");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdDepartment"));

                    b.Property<string>("Departmentname")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("departmentname")
                        .HasDefaultValueSql("'DepartmentName'::character varying");

                    b.HasKey("IdDepartment")
                        .HasName("departments_pkey");

                    b.ToTable("departments", (string)null);
                });

            modelBuilder.Entity("StudioManager.Model.Game", b =>
                {
                    b.Property<int>("IdGame")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_game");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdGame"));

                    b.Property<string>("Gamedescription")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("gamedescription");

                    b.Property<string>("Gamegenre")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("gamegenre")
                        .HasDefaultValueSql("'GameGenre'::character varying");

                    b.Property<string>("Gamename")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("gamename")
                        .HasDefaultValueSql("'GameName'::character varying");

                    b.Property<byte[]>("Gamepicture")
                        .HasColumnType("bytea")
                        .HasColumnName("gamepicture");

                    b.Property<DateOnly>("Gamereleasedate")
                        .HasColumnType("date")
                        .HasColumnName("gamereleasedate");

                    b.HasKey("IdGame")
                        .HasName("games_pkey");

                    b.ToTable("games", (string)null);
                });

            modelBuilder.Entity("StudioManager.Model.Staff", b =>
                {
                    b.Property<int>("IdEmployee")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_employee");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdEmployee"));

                    b.Property<string>("Employeeemail")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying")
                        .HasColumnName("employeeemail")
                        .HasDefaultValueSql("'example@example.com'::character varying");

                    b.Property<string>("Employeefullname")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("employeefullname")
                        .HasDefaultValueSql("'FullName'::character varying");

                    b.Property<string>("Employeephonenumber")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying")
                        .HasColumnName("employeephonenumber")
                        .HasDefaultValueSql("'+1234567890'::character varying");

                    b.Property<byte[]>("Employeephoto")
                        .HasColumnType("bytea")
                        .HasColumnName("employeephoto");

                    b.Property<string>("Employeeposition")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("employeeposition")
                        .HasDefaultValueSql("'Employee'::character varying");

                    b.Property<string>("Employeesex")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("employeesex");

                    b.Property<int?>("IdDepartment")
                        .HasColumnType("integer")
                        .HasColumnName("id_department");

                    b.HasKey("IdEmployee")
                        .HasName("staff_pkey");

                    b.HasIndex("IdDepartment");

                    b.ToTable("staff", (string)null);
                });

            modelBuilder.Entity("StudioManager.Model.Task", b =>
                {
                    b.Property<int>("IdTask")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_task");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdTask"));

                    b.Property<int?>("IdDepartment")
                        .HasColumnType("integer")
                        .HasColumnName("id_department");

                    b.Property<int?>("IdGame")
                        .HasColumnType("integer")
                        .HasColumnName("id_game");

                    b.Property<DateTime>("Taskdeadline")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("taskdeadline");

                    b.Property<string>("Taskgroup")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("taskgroup")
                        .HasDefaultValueSql("'TaskGroup'::character varying");

                    b.Property<string>("Taskname")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("taskname")
                        .HasDefaultValueSql("'TaskName'::character varying");

                    b.Property<string>("Taskstate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("taskstate")
                        .HasDefaultValueSql("'Sent'::character varying");

                    b.HasKey("IdTask")
                        .HasName("tasks_pkey");

                    b.HasIndex("IdDepartment");

                    b.HasIndex("IdGame");

                    b.ToTable("tasks", (string)null);
                });

            modelBuilder.Entity("StudioManager.Model.User", b =>
                {
                    b.Property<int>("IdUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_user");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdUser"));

                    b.Property<string>("Useremail")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("useremail")
                        .HasDefaultValueSql("'example@example.com'::character varying");

                    b.Property<string>("Userlogin")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("userlogin")
                        .HasDefaultValueSql("'Login'::character varying");

                    b.Property<string>("Userpassword")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("userpassword");

                    b.Property<byte[]>("Userprofilepicture")
                        .HasColumnType("bytea")
                        .HasColumnName("userprofilepicture");

                    b.HasKey("IdUser")
                        .HasName("users_pkey");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("StudioManager.Model.Usergame", b =>
                {
                    b.Property<int?>("IdGame")
                        .HasColumnType("integer")
                        .HasColumnName("id_game");

                    b.Property<int?>("IdUser")
                        .HasColumnType("integer")
                        .HasColumnName("id_user");

                    b.HasKey("IdGame", "IdUser")
                        .HasName("usergames_pkey");

                    b.HasIndex("IdUser");

                    b.ToTable("usergames", (string)null);
                });

            modelBuilder.Entity("StudioManager.Model.Staff", b =>
                {
                    b.HasOne("StudioManager.Model.Department", "IdDepartmentNavigation")
                        .WithMany("Staff")
                        .HasForeignKey("IdDepartment")
                        .HasConstraintName("id_department_fk");

                    b.Navigation("IdDepartmentNavigation");
                });

            modelBuilder.Entity("StudioManager.Model.Task", b =>
                {
                    b.HasOne("StudioManager.Model.Department", "IdDepartmentNavigation")
                        .WithMany("Tasks")
                        .HasForeignKey("IdDepartment")
                        .HasConstraintName("id_department_fk");

                    b.HasOne("StudioManager.Model.Game", "IdGameNavigation")
                        .WithMany("Tasks")
                        .HasForeignKey("IdGame")
                        .HasConstraintName("id_game_fk");

                    b.Navigation("IdDepartmentNavigation");

                    b.Navigation("IdGameNavigation");
                });

            modelBuilder.Entity("StudioManager.Model.Usergame", b =>
                {
                    b.HasOne("StudioManager.Model.Game", "IdGameNavigation")
                        .WithMany("Usergames")
                        .HasForeignKey("IdGame")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("id_game_fk");

                    b.HasOne("StudioManager.Model.User", "IdUserNavigation")
                        .WithMany("Usergames")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("id_user_fk");

                    b.Navigation("IdGameNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("StudioManager.Model.Department", b =>
                {
                    b.Navigation("Staff");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("StudioManager.Model.Game", b =>
                {
                    b.Navigation("Tasks");

                    b.Navigation("Usergames");
                });

            modelBuilder.Entity("StudioManager.Model.User", b =>
                {
                    b.Navigation("Usergames");
                });
#pragma warning restore 612, 618
        }
    }
}
